// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String          @id @default(uuid()) @db.Uuid
  firstName     String
  lastName      String
  email         String          @unique
  password      String
  phone         String?
  role          UserRole        @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  addresses     Address[]
  paymentMethods PaymentMethod[]
  orders        Order[]
  cart          Cart?
}

model Address {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  name      String
  address   String
  city      String
  zipCode   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PaymentMethodType {
  CREDIT_CARD
  BANK_TRANSFER
  E_WALLET
}

model PaymentMethod {
  id        String           @id @default(uuid()) @db.Uuid
  userId    String           @db.Uuid
  type      PaymentMethodType
  details   Json
  isDefault Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String
  price         Decimal     @db.Decimal(10, 2)
  oldPrice      Decimal?    @db.Decimal(10, 2)
  description   String      @db.Text
  image         String
  images        String[]
  brand         String
  categoryId    String      @db.Uuid
  stock         Int
  featured      Boolean     @default(false)
  isNewArrival  Boolean     @default(false)
  isBestSeller  Boolean     @default(false)
  specifications Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  category      Category    @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]
  cartItems     CartItem[]
}

model Category {
  id          String     @id @default(uuid()) @db.Uuid
  name        String
  slug        String     @unique
  description String?    @db.Text
  image       String?
  parentId    String?    @db.Uuid
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryToSubcategory")
  products    Product[]
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model Order {
  id              String        @id @default(cuid())
  userId          String        @db.Uuid
  subtotal        Decimal       @db.Decimal(10, 2)
  shipping        Decimal       @db.Decimal(10, 2)
  total           Decimal       @db.Decimal(10, 2)
  status          OrderStatus   @default(PROCESSING)
  shippingAddress Json
  paymentMethod   String
  paymentStatus   PaymentStatus @default(PENDING)
  trackingNumber  String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  items           OrderItem[]
}

model OrderItem {
  id           Int      @id @default(autoincrement())
  orderId      String
  productId    Int
  productName  String
  productImage String
  price        Decimal  @db.Decimal(10, 2)
  quantity     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      Product  @relation(fields: [productId], references: [id])
}

model Cart {
  id        String     @id @default(uuid()) @db.Uuid
  userId    String     @unique @db.Uuid
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    String   @db.Uuid
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}
